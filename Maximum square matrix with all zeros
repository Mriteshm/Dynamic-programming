import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    public static int[][] takeInput() throws IOException {

        String[] nm;
        nm = br.readLine().split("\\s");
        int n = Integer.parseInt(nm[0]);
        int m = Integer.parseInt(nm[1]);
		int arr[][]=new int[n][m];

        if (n == 0) {
            return arr;
        }
        

		String[] strNums;
        for (int i = 0; i < n; ++i) {            
            strNums = br.readLine().split("\\s");
            for (int j = 0; j < m; ++j){
                arr[i][j] = Integer.parseInt(strNums[j]);
            }
            
        }

        return arr;
    }

	public static void main(String[] args) throws IOException {

        int[][] arr = takeInput();
		System.out.println(findMaxSquareWithAllZeros(arr));
	}
	public static int findMaxSquareWithAllZeros(int[][] input)
	{
		
			int n=input.length;
			 if (n==0)
         return 0;
    
		int m=input[0].length;
	 if (m==0)
         return 0;
        
	
		int[][]input1=new int[n][m];
        for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
                if(input[i][j]==0)
				{
					input1[i][j]=1;
				}
				else
				{
					input1[i][j]=0;
				}
			}
		}
		
		int [][]dp=new int[n][m];
		for(int i=n-1;i>=0;i--)
		{
			for(int j=m-1;j>=0;j--)
			{
				if(i==n-1||j==m-1)
				{
					if(input1[i][j]==1)
					{
                          dp[i][j]=1;
					}
				}
				else
				{
					if(input1[i][j]==1)
				dp[i][j]=1+Math.min(dp[i][j+1],Math.min(dp[i+1][j],dp[i+1][j+1]));
				}
			}
		}
		int ans=-1;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
                 if(dp[i][j]>ans)
				 {
					 ans=dp[i][j];
				 }
			}
		}
		
	return ans;
	}

	
}
